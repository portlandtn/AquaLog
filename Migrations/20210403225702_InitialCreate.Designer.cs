// <auto-generated />
using System;
using AquaLog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AquaLog.Migrations
{
    [DbContext(typeof(AquaLogDbContext))]
    [Migration("20210403225702_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AquaLog.Core.Aquarium", b =>
                {
                    b.Property<int>("AquariumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("AquariumId");

                    b.ToTable("Aquariums");
                });

            modelBuilder.Entity("AquaLog.Core.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AquariumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("LogId");

                    b.HasIndex("AquariumId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("AquaLog.Core.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LogId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasurementKeyId")
                        .HasColumnType("integer");

                    b.Property<double>("MeasurementValue")
                        .HasColumnType("double precision");

                    b.HasKey("MeasurementId");

                    b.HasIndex("LogId");

                    b.HasIndex("MeasurementKeyId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("AquaLog.Core.MeasurementKey", b =>
                {
                    b.Property<int>("MeasurementKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MeasurementKeyId");

                    b.ToTable("MeasurementKeys");
                });

            modelBuilder.Entity("AquaLog.Core.Log", b =>
                {
                    b.HasOne("AquaLog.Core.Aquarium", "Aquarium")
                        .WithMany("Logs")
                        .HasForeignKey("AquariumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquarium");
                });

            modelBuilder.Entity("AquaLog.Core.Measurement", b =>
                {
                    b.HasOne("AquaLog.Core.Log", "Log")
                        .WithMany("Measurement")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AquaLog.Core.MeasurementKey", "MeasurementKey")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");

                    b.Navigation("MeasurementKey");
                });

            modelBuilder.Entity("AquaLog.Core.Aquarium", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("AquaLog.Core.Log", b =>
                {
                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("AquaLog.Core.MeasurementKey", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
